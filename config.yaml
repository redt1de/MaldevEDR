
debug_process:
  exit_delay: 2
  debug_output: true
  debug_priv: true
hooks:
  libdir: z:\\MalDevEDR\\_external\\bin
  helper_dll: x64EDRHelper.dll
  hook_dll: EdrHooksx64.dll
  pipe: \\.\pipe\MalDevEDR\hooks   # still listen on this, but moved hook events to debugger output. low level pipe writes via the hooks were causing issues.
  rules:
    - name: Executable Memory Allocation
      match: 'Function == "NtAllocateVirtualMemory" && !(ReturnSymbol matches "NTDLL*")'
      # message: '"protect: %s,  return:%s\n",Args.Protect,ReturnAddress'
    - name: testing
      match: 'Function == "NtProtectVirtualMemory" && Args.Protect in ["0x1","0x2","0x4","0x8"]'
      # message:  '"ret: %s,  fn:%s\n",Args.ret,Args.fn'
etw:
  pipe: \\.\pipe\MalDevEDR\events
  global_rules:
    # - name: Direct Syscall (Remote Proccess)
    #   match: "EventID=10 && CallTrace~='^UNKNOWN.*'"

  user_providers:
    - name: Microsoft-Windows-Sysmon
      enabled: false
      stacktrace: false
      rules:
        - name: SysmonEvent10
          match: EventID == 10
          # message: '"EventID is: %.0f\n", EventID'

  ppl_providers:
    - name: Microsoft-Windows-Threat-Intelligence
      enabled: true
      stacktrace: true
      rules:
        - name: Manual Syscall
          # match: '(StackTrace[6] matches "0xffff*" && !(StackTrace[7] matches "NTDLL*" || StackTrace[7] matches "0xffff*"))'
          match: '(StackTrace[5] matches "0xffff*") && !(StackTrace[6] matches "0xffff*" || StackTrace[6] matches "NTDLL*")'
          message: '"Kernel returns to: %s\n",StackTrace[6]'

        # - name: Memory Allocation
        #   match: 'EventID in [1, 6, 21, 26 ]' 

    - name: Microsoft-Windows-Sysmon
      enabled: false
      stacktrace: false
      rules:
        - name: SysmonEvent10
          match: EventID == 10
          # message: '"EventID is: %.0f\n", EventID'